---
title: "Hackathon DGFIP PSL 2023 "
title-block-banner: true
subtitle: "Attractivité fiscale des territoires pour les entreprises"
author:
  - name: Olivier Caron
    email: olivier.caron@dauphine.psl.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
  - name: Victorien Gbaguidi
    email: victorien.gbaguidi@dauphine.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
  - name: Sagliss Oussama
    email: oussama.sagliss@dauphine.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
  - name: David Roufé
    email: david.roufe@dauphine.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
date : "11/25/2023"
toc: true
number-sections: true
number-depth: 10
format:
  html:
    theme:
      light: litera
      #dark: darkly
    code-fold: true
    code-summary: "Display code"
    code-tools: true #enables to display/hide all blocks of code
    code-copy: true #enables to copy code
    grid:
      body-width: 1000px
      margin-width: 100px
    toc: true
    toc-title: "Table des Matières"
    toc-location: left
execute:
  echo: true
  warning: false
  message: false
editor: visual
fig-align: "center"
highlight-style: ayu
reference-location: margin
css: style.css
---

```{r}
#| label: library-load-data
#| echo: true
#| eval: true

library(tidyverse)
library(readxl)
library(rjson)
library(fs)
library(plotly)

# Chargement et préparation des données
communes_data <- read.csv("data/v_commune_insee_2023.csv") #codes et noms des communes selon l'INSEE
communes_data <- communes_data %>%
  filter(DEP %in% c(16)) %>% #filtrage sur la Charente
  select(COM, NCCENR) %>%
  rename(code = COM, nom = NCCENR) %>%
  mutate(cfe = round(runif(n(), min = 227, max = 7046),2)) %>%
  mutate(hover_text = paste0(nom, "<br>", cfe))
  
```

## Sujet

**`Attractivité fiscale des territoires pour les entreprises.`**

## Contexte

En France, la localisation d'une entreprise peut avoir un impact significatif sur ses finances, comprendre l'attractivité fiscale des différents territoires devient crucial. 
Ce projet s'inscrit dans une démarche d'**aide à la décision pour les entreprises** en quête de la localisation la plus propice, en termes de **charges fiscales**, adaptée à leurs caractéristiques propres.

## Projet

Le projet développé lors de ce hackathon est un tableau de bord permettant de différencier ces coûts fiscaux à l'échelle des communes de la Charente.\
Toutefois, celle-ci est facilement adaptable à l'ensemble des communes car un filtre est réalisé sur les communes de la Charente, les seules pour lesquelles nous ayons des données fiscales.

## Choix métiers

Nous avons choisi de nous concentrer sur le calcul de la **CFE** (cotisation foncière des entreprises) compte tenu des délais.\
Pour cela, nous prenons en compte le calcul de la base grâce au tarif foncier et le taux de l'intercommunalité ainsi que le coefficient de régulation.

## Choix techniques

Pour réaliser ce dashboard, nous avons sélectionné un ensemble d'outils open source, en prenant en compte l'expertise préexistante de notre équipe et la facilité d'intégration de ces technologies.

Concernant les données géographiques, nous avons utilisé les données des contours de communes de la Charente dans un fichier json.

### Outils utilisés

| Technologie | Description                                                                                                                                                                                                                                       |
|-------------------|-----------------------------------------------------|
| `Python`    | Python est un langage de programme très connu orienté objet. Nous l'avons utilisé pour collecter, formater les données ainsi que calculer la CFE (non finalisé).                                                                                  |
| `R`         | R est un langage de programmation largement adopté par les statisticiens, économistes, biologistes et cartographes. Nous avons exploité sa facilité d'utilisation, notamment en cartographie et pour le développement de l'interface utilisateur. |
| `Shiny`     | Shiny est un framework web initialement conçu pour R, et depuis 2022, il est également disponible pour Python. Ce choix s'appuie sur sa capacité à créer des dashboards interactifs et dynamiques facilement.                                     |
| `Plotly`    | Plotly est une bibliothèque graphique interactive, open-source et basée sur un navigateur. La carte est créé grâce à cet outil. [Plus d'informations ici](https://plotly.com/r/ "Plotly website").                                                |

### La carte

La carte est réalisée avec Plotly.

La visualisation interactive offre la possibilité de passer la souris sur les différentes communes pour afficher instantanément le niveau de taxation de chacune. Le code couleur est utilisé pour indiquer les variations du montant de la taxe à première vue.

#### Différentes palettes de couleurs

Nous avons choisi une palette de couleur simple mais il est très aisé de changer les différentes propriétés esthétiques de la carte. Voici quelques autres propositions.

::: panel-tabset
### Défaut

```{r}
#| label: carte-communes-charente-defaut

url <- 'data/charente.json'
geojson <- rjson::fromJSON(file=url)
g <- list(
  fitbounds = "locations",
  visible = FALSE,
  scope = "france"
)

custom_colorscale <- list(
  c(0, "red"),    # rouge à 0%
  c(0.5, "yellow"),  # jaune à 50%
  c(1, "green")   # vert à 100%
)

fig <- plot_ly() 
fig <- fig %>% add_trace(
  type = "choroplethmapbox",
  geojson = geojson,
  locations = communes_data$code,
  z = communes_data$cfe,
  text = communes_data$hover_text,
  hoverinfo = "text",
  colorscale = custom_colorscale,
  reversescale = TRUE,
  featureidkey = "properties.code",
  marker = list(
    line = list(width = 0.5),
    opacity = 0.8
  )
)
fig <- fig %>% colorbar(title = "CFE")
fig <- fig %>% layout(
  mapbox = list(
    style = "carto-positron",
    zoom = 7,  # Ajuster le niveau de zoom pour mieux cadrer le département 16
    center = list(lon = 0.1, lat = 45.7)  # Coordonnées centrées sur le département 16
  )
)

fig

```

### Viridis

```{r}
#| label: carte-communes-charente-viridis

url <- 'data/charente.json'
geojson <- rjson::fromJSON(file=url)
g <- list(
  fitbounds = "locations",
  visible = FALSE,
  scope = "france"
)

fig <- plot_ly() 
fig <- fig %>% add_trace(
  type = "choroplethmapbox",
  geojson = geojson,
  locations = communes_data$code,
  z = communes_data$cfe,
  text = communes_data$hover_text,
  hoverinfo = "text",
  colorscale = "Viridis",
  reversescale = TRUE,
  featureidkey = "properties.code",
  marker = list(
    line = list(width = 0.5),
    opacity = 0.8
  )
)
fig <- fig %>% colorbar(title = "CFE")
fig <- fig %>% layout(
  mapbox = list(
    style = "carto-positron",
    zoom = 7,  # Ajuster le niveau de zoom pour mieux cadrer le département 16
    center = list(lon = 0.1, lat = 45.7)  # Coordonnées centrées sur le département 16
  )
)

fig
```

### Noir

```{r}
#| label: carte-communes-charente-noir
custom_colorscale <- list(
  c(0, "black"), 
  c(1, "white")
)


url <- 'data/charente.json'
geojson <- rjson::fromJSON(file=url)
g <- list(
  fitbounds = "locations",
  visible = FALSE,
  scope = "france"
)

fig <- plot_ly() 
fig <- fig %>% add_trace(
  type = "choroplethmapbox",
  geojson = geojson,
  locations = communes_data$code,
  z = communes_data$cfe,
  text = communes_data$hover_text,
  hoverinfo = "text",
  colorscale = custom_colorscale,
  reversescale = TRUE,
  featureidkey = "properties.code",
  marker = list(
    line = list(width = 0.3,
                color = "black"),
    opacity = 0.8
  )
)
fig <- fig %>% colorbar(title = "CFE")
fig <- fig %>% layout(
  mapbox = list(
    style = "carto-positron",
    zoom = 7,  # Ajuster le niveau de zoom pour mieux cadrer le département 16
    center = list(lon = 0.1, lat = 45.7)  # Coordonnées centrées sur le département 16
  )
)

fig
```

### Heat

```{r}
#| label: carte-communes-charente-heat



url <- 'data/charente.json'
geojson <- rjson::fromJSON(file=url)
g <- list(
  fitbounds = "locations",
  visible = FALSE,
  scope = "france"
)

fig <- plot_ly() 
fig <- fig %>% add_trace(
  type = "choroplethmapbox",
  geojson = geojson,
  locations = communes_data$code,
  z = communes_data$cfe,
  text = communes_data$hover_text,
  hoverinfo = "text",
  colorscale = "heat",
  reversescale = FALSE,
  featureidkey = "properties.code",
  marker = list(
    line = list(width = 0.4,
                color = "black"),
    opacity = 0.8
  )
)
fig <- fig %>% colorbar(title = "CFE")
fig <- fig %>% layout(
  mapbox = list(
    style = "carto-positron",
    zoom = 7,  # Ajuster le niveau de zoom pour mieux cadrer le département 16
    center = list(lon = 0.1, lat = 45.7)  # Coordonnées centrées sur le département 16
  )
)

fig
```
:::

## Un aperçu de l'application

### Interface utilisateur

Plusieurs champs sont situés dans la barre latérale gauche, permettant de préciser les caractéristiques des entreprises.

![](images/ui_shiny.png){fig-align="center"}

### Tableau des données

Ce tableau permet de voir toutes les communes et la valeur de la CFE associée.

Une barre de recherche dans le coin supérieur droit est mise à disposition de l'utilisateur pour chercher la commune souhaitée.

![](images/tableau_communes.png){fig-align="center"}

## Arborescence du projet

```{r}
#| label: arborescence
fs::dir_tree(path=".")
```

### Description des principaux fichiers

| Dossier parent        | Description des tâches                                                                                                                                                                                                                                                                                                             |
|-------------------|-----------------------------------------------------|
| `data`                | Ce dossier contient les données des communes, à la fois les contours, les codes et les noms de communes (INSEE).                                                                                                                                                                                                                |
| `documentation_files` | Ce dossier contient l'ensemble des documents nécessaires à l'affichage de cette documentation directement en HTML, ce qui est idéal pour la mettre en ligne et permettre à tout le monde de comprendre rapidement le projet.                                                                                                       |
| `shiny_ui.R`          | Ce fichier contient à la fois le serveur et l'UI nécessaires à l'exécution de l'application Shiny. Il est possible de séparer les deux parties en deux fichiers distincts. L'application est relativement simple et reste parfaitement compréhensible dans un seul fichier. Les deux logiques sont bien affichées en commentaires. |
| `src`                 | Ce dossier contient l'ensemble des documents et données python nécessaires au calcul des différentes taxes. Ces traitements sont exécutés depuis R grâce à la librairie [`Reticulate`](https://rstudio.github.io/reticulate/ "Info package Reticulate") permettant d'exécuter du code Python.                                      |

## Exécuter l'application

### Dépendances

Pour exécuter notre application Shiny, certains packages R sont nécessaires.

Voici la liste des packages requis et de la commande pour les installer :

```{r}
#| label: packages
#| echo: true
#| eval: false
#| code-fold: show
install.packages(c("shiny",
                   "shinydashboard",
                   "plotly",
                   "tidyverse",
                   "rjson",
                   "DT"))

```

### Démarrer l'application

Se placer à la racine du projet et exécuter la commande suivante :

```{r}
#| label: run-app
#| echo: true
#| eval: false
#| code-fold: show
runApp("shiny_ui.R")
```

ou cliquer sur "`Run App`" depuis Rstudio.
